# -*- coding: utf-8 -*-
"""
A->B) First step: DICOM conversion
"""

#from nipype import config
#config.enable_debug_mode()

#import sys,io,os

import sys, os


        ########## do not work, how to specify the path of the executables???? ######
        
class PrepRadaInputSpec(CommandLineInputSpec):
    
    radatools_path = traits.String(exists=True,desc='path to radatools software - installed externally ', mandatory=True, position = 0, argstr="%s")
    
    net_List_file = File(exists=True, desc='List of edges describing net in format i j weight', mandatory=True)
    
class PrepRadaOutputSpec(TraitedSpec):
    
    Pajek_net_file = File(exists=True, desc="net description in Pajek format, generated by radatools")
    
class PrepRada(CommandLine):
    
    """
    Format net list (format i j weight) to Pajek file
    """
    
    _cmd = os.path.join('01-Prepare_Network','List_To_Net.exe')
    
    input_spec = PrepRadaInputSpec
    output_spec = PrepRadaOutputSpec

    def _run_interface(self, runtime):
                
        radatools_path = self.inputs.radatools_path
        net_List_file = self.inputs.net_List_file
        
        path, fname, ext = split_f(net_List_file)
    
        Pajek_net_file = os.path.abspath(fname + '.net')
    
        self.args = [net_List_file , Pajek_net_file ,' U' ]
        
        self._cmdpath = radatools_path
    
        return runtime
        
    def _list_outputs(self):
        
        outputs = self._outputs().get()
        
        net_List_file = self.inputs.net_List_file
        
        path, fname, ext = split_f(net_List_file)
    
        outputs["Pajek_net_file"] = os.path.abspath(fname + '.net')
    
        return outputs
        
######################################################################################### NetPropRada ##################################################################################################################

#class NetPropRadaInputSpec(BaseInterfaceInputSpec):
    
    #radatools_path = traits.String(default = "", exists=True,desc='path to radatools software - installed externally ', mandatory=True, position = 0, argstr="%s")
    
    #Pajek_net_file = File(exists=True, desc='net description in Pajek format', mandatory=True)
    
    #optim_seq = traits.String('all 2',usedefault = True, exists=True, desc = "Optimisation sequence, see radatools documentation for more information")
    
#class NetPropRadaOutputSpec(TraitedSpec):
    
    #rada_log_file = File(exists=True, desc="network properties log, generated by radatools")
    
#class NetPropRada(BaseInterface):
    
    #"""
    #Launch Network properties on Pajek file with given parameters (see Network_Properties in Radatools)
    #"""
    #input_spec = NetPropRadaInputSpec
    #output_spec = NetPropRadaOutputSpec

    
    ##def __init__(self):
    
        ##self._cmd = os.path.join(radatools_path,'01-Prepare_Network','List_To_Net.exe')
        
    #def _run_interface(self, runtime):
                
        #radatools_path = self.inputs.radatools_path
        #Pajek_net_file = self.inputs.Pajek_net_file
        
        #optim_seq = self.inputs.optim_seq
        
        #path, fname, ext = split_f(Pajek_net_file)
    
        #rada_log_file = os.path.abspath(fname + '.log')
        
        #cmd = os.path.join(radatools_path,'04-Other_Tools','Network_Properties.exe') + ' ' + Pajek_net_file + ' ' + optim_seq + ' > ' + rada_log_file
        
        ##+ ' > '+ rada_res_file
        
        #print "defining command " + cmd
    
        #os.system(cmd)
    
        #return runtime
        
    #def _list_outputs(self):
        
        #outputs = self._outputs().get()
        
        #path, fname, ext = split_f(self.inputs.Pajek_net_file)
    
        #outputs["rada_log_file"] = os.path.abspath(fname + '.log')
    
        #return outputs

if __name__ =='__main__':
    
    test()
        
    
    
    
